x = 1:20001
y = x^17
toc()
?tictoc
?proc.time
1 = proc.time()
p1 = proc.time()
p1 = proc.time()
x = 1:20001
y = x^17
proc.time() - p1
x = 1:20001
y = x^17
proc.time()
?function
??function
RNuGen = function(mean,sd){
Outer_Sim = rnorm(1000000,mean,sd)
PVal_dist = NuVal_mat = matrix(NA, 10000,100)
temp.means = temp.sd = matrix(NA, 10000,100)
SdEst = numeric(10000)
for (i in 1:100){
vec1 = sample(Outer_Sim,10000)
vec2 = sample(Outer_Sim,10000)
for (j in 1:10000){
temp.means[j,i] = mean(c(vec1[j],vec2[j]))
temp.sd[j,i] = sd(c(vec1[j],vec2[j]))
}
l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
SdEst[i] = predict(l.mod)
for (k in 1:10000){
NuVal_mat[k,i] = abs(vec1[k]) - vec2[k]/SdEst[i]
}
}
}
RNuGen(0,1)
Mat = RNuGen(0,1)
Mat
blah = function(x){
y = matrix(NA,4,4)
for (i in 1:4){
y[i,i] = (x[i,i+1]^4)
}
}
blah(matrix(30:45,4,4))
blah = function(x){
y = matrix(NA,4,4)
for (i in 1:4){
y[i,i] = (x[i,3]^4)
}
}
blah(matrix(30:45,4,4))
Mat = blah(matrix(30:45,4,4))
Mat
blah = function(x){
y = matrix(NA,4,4)
for (i in 1:4){
y[i,i] = (x[i,3]^4)
}
return(y)
}
Mat = blah(matrix(30:45,4,4))
MAt
Mat
RNuGen = function(mean,sd){
Outer_Sim = rnorm(1000000,mean,sd)
PVal_dist = NuVal_mat = matrix(NA, 10000,100)
temp.means = temp.sd = matrix(NA, 10000,100)
SdEst = numeric(10000)
for (i in 1:100){
vec1 = sample(Outer_Sim,10000)
vec2 = sample(Outer_Sim,10000)
for (j in 1:10000){
temp.means[j,i] = mean(c(vec1[j],vec2[j]))
temp.sd[j,i] = sd(c(vec1[j],vec2[j]))
}
l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
SdEst[i] = predict(l.mod)
for (k in 1:10000){
NuVal_mat[k,i] = abs(vec1[k]) - vec2[k]/SdEst[i]
}
}
return(NuVal_mat)
}
Mat = RNugen(0,1)
Mat = RNuGen(0,1)
v = as.vector(NuVal_mat)
v_unique = v[!duplicated(v)]
vs = sort(v_unique)
#v_rank = rank(vs)
num = max(v_rank)
length(v)
v = as.vector(Mat)
length(v)
v_unique = v[!duplicated(v)]
length(v_unique)
w = v[1:100]
w2 = sort(w)
w2
Outer_Sim = rnorm(1000000,mean,sd)
Outer_Sim = rnorm(1000000,0,1)
vec1 = sample(Outer_Sim,10000)
vec2 = sample(Outer_Sim,10000)
for (j in 1:10000){
temp.means[j,i] = mean(c(vec1[j],vec2[j]))
temp.sd[j,i] = sd(c(vec1[j],vec2[j]))
}
m = mean(c(vec1,vec2))
for (i in 1:10000){}
for (i in 1:10000){
m[i] = mean(c(vec1[i],vec2[2]))
sd[i] = sd(c(vec1[i],vec2[i]))
}
for (i in 1:10000){
m[i] = mean(c(vec1[i],vec2[i]))
sd[i] = sd(c(vec1[i],vec2[i]))
}
sd(c(3,4))
vec1
vec2
sd(c(vec1[45],vec2[45]))
m = sd = vector("numeric", length = 10000)
for (i in 1:10000){
m[i] = mean(c(vec1[i],vec2[i]))
sd[i] = sd(c(vec1[i],vec2[i]))
}
m = mean(c(vec1,vec2))
length(sd[sd<0])
l.mod = loess(temp.sd ~ temp.means)
l.mod = loess(sd ~ m)
length(sd)
length(m)
m = sd = vector("numeric", length = 10000)
for (i in 1:10000){
m[i] = mean(c(vec1[i],vec2[i]))
sd[i] = sd(c(vec1[i],vec2[i]))
}
l.mod = loess(sd ~ m)
sd = predict(l.mod)
sd
m = sd = vector("numeric", length = 10000)
for (i in 1:10000){
m[i] = mean(c(vec1[i],vec2[i]))
sd[i] = sd(c(vec1[i],vec2[i]))
}
l.mod = loess(sd ~ m)
sdEst = predict(l.mod)
length(sdEst[sdEst<0])
w2
x = [0.3,0,6,0,9,1,4,3.4]
x = c(0.3,0,6,0,9,1,4,3.4)
for (i in 1:length(x)){
y[i] = length(w[w<=x[i]])
end
}
x = c(0.3,0,6,0,9,1,4,3.4)
y = numeric(length(x))
for (i in 1:length(x)){
y[i] = length(w[w<=x[i]])
}
y
x = [1:23]
x = 1:23
p = length(x[x<=16])
p
x = c(4,7,2,1,8,9,10)
p = length(x[x<=16])
p
Nu2P = function(matrix,vec){
MatP = matrix(NA,n,s)
for (i in 1:n){
for (j in 1:s){
MatP[i,j] = length(vec[vec <= matrix[i,j]])/10000
}
}
return(MatP)
}
Paired_Stat = function(MatA){
nml_idx = grep(nml_str,colnames(MatA))
Mat_Nml = MatA[ ,nml_idx]
Mat_Tum = MatA[ , -nml_idx]
n = dim(Mat_Nml)[1]
s = dim(Mat_Nml)[2]
temp.means = temp.sd = MatsdEst = MatNu = matrix(NA,n,s)
for (i in 1:s){
for (j in 1:n){
temp.means[j,i] = mean(c(Mat_Nml[j,i],Mat_Tum[j,i]))
temp.sd[j,i] = sd(c(Mat_Nml[j,i],Mat_Tum[j,i]))
} l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
MatsdEst[ ,i] = predict(l.mod)
for (k in 1:n){
MatNu[k,i] = abs((Mat_Nml[k,i]) - (Mat_Tum[k,i]))/MatsdEst[k,i]
}
}
RandNu = RNuGen(mean(MatNu),sd(MatNu))
v = as.vector(RandNu)
PVals_paired = Nu2P(MatNu,v)
}
Paired_Stat = function(MatA){
nml_idx = grep(nml_str,colnames(MatA))
Mat_Nml = MatA[ ,nml_idx]
Mat_Tum = MatA[ , -nml_idx]
n = dim(Mat_Nml)[1]
s = dim(Mat_Nml)[2]
temp.means = temp.sd = MatsdEst = MatNu = matrix(NA,n,s)
for (i in 1:s){
for (j in 1:n){
temp.means[j,i] = mean(c(Mat_Nml[j,i],Mat_Tum[j,i]))
temp.sd[j,i] = sd(c(Mat_Nml[j,i],Mat_Tum[j,i]))
} l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
MatsdEst[ ,i] = predict(l.mod)
for (k in 1:n){
MatNu[k,i] = abs((Mat_Nml[k,i]) - (Mat_Tum[k,i]))/MatsdEst[k,i]
}
}
RandNu = RNuGen(mean(MatNu),sd(MatNu))
v = as.vector(RandNu)
PVals_paired = Nu2P(MatNu,v)
}
require(matrixStats)
require(stats)
input = read.csv(file = "C:/Users/anous/Documents/R/BMI Research/Input/Bank_Testing.csv", row.names = 1)
MatB = data.matrix(input1)
input2 = read.csv(file = "C:/Users/anous/Documents/R/BMI Research/Input/Paired_Testing.csv", row.names = 1)
MatP = data.matrix(input2)
#RN = rownames(input)
nml_str = "Normal"
tum_str = "Cancer"
require(matrixStats)
require(stats)
input1 = read.csv(file = "C:/Users/anous/Documents/R/BMI Research/Input/Bank_Testing.csv", row.names = 1)
MatB = data.matrix(input1)
input2 = read.csv(file = "C:/Users/anous/Documents/R/BMI Research/Input/Paired_Testing.csv", row.names = 1)
MatP = data.matrix(input2)
#RN = rownames(input)
nml_str = "Normal"
tum_str = "Cancer"
Paired_Stat = function(matrix){
nml_idx = grep(nml_str,colnames(matrix))
Mat_Nml = MatA[ ,nml_idx]
Mat_Tum = MatA[ , -nml_idx]
n = dim(Mat_Nml)[1]
s = dim(Mat_Nml)[2]
temp.means = temp.sd = MatsdEst = MatNu = matrix(NA,n,s)
for (i in 1:s){
for (j in 1:n){
temp.means[j,i] = mean(c(Mat_Nml[j,i],Mat_Tum[j,i]))
temp.sd[j,i] = sd(c(Mat_Nml[j,i],Mat_Tum[j,i]))
} l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
MatsdEst[ ,i] = predict(l.mod)
for (k in 1:n){
MatNu[k,i] = abs((Mat_Nml[k,i]) - (Mat_Tum[k,i]))/MatsdEst[k,i]
}
}
RandNu = RNuGen(mean(MatNu),sd(MatNu))
v = as.vector(RandNu)
PVals_paired = Nu2P(MatNu,v)
}
RNuGen = function(mean,sd){
Outer_Sim = rnorm(1000000,mean,sd)
PVal_dist = NuVal_mat = matrix(NA, 10000,100)
temp.means = temp.sd = matrix(NA, 10000,100)
SdEst = numeric(10000)
for (i in 1:100){
vec1 = sample(Outer_Sim,10000)
vec2 = sample(Outer_Sim,10000)
for (j in 1:10000){
temp.means[j,i] = mean(c(vec1[j],vec2[j]))
temp.sd[j,i] = sd(c(vec1[j],vec2[j]))
}
l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
SdEst[i] = predict(l.mod)
for (k in 1:10000){
NuVal_mat[k,i] = abs(vec1[k] - vec2[k])/SdEst[i]
}
}
return(NuVal_mat)
}
Nu2P = function(matrix,vec){
MatP = matrix(NA,n,s)
for (i in 1:n){
for (j in 1:s){
MatP[i,j] = length(vec[vec <= matrix[i,j]])/10000
}
}
return(MatP)
}
Paired_Stat = function(matrix){
nml_idx = grep(nml_str,colnames(matrix))
Mat_Nml = MatA[ ,nml_idx]
Mat_Tum = MatA[ , -nml_idx]
n = dim(Mat_Nml)[1]
s = dim(Mat_Nml)[2]
temp.means = temp.sd = MatsdEst = MatNu = matrix(NA,n,s)
for (i in 1:s){
for (j in 1:n){
temp.means[j,i] = mean(c(Mat_Nml[j,i],Mat_Tum[j,i]))
temp.sd[j,i] = sd(c(Mat_Nml[j,i],Mat_Tum[j,i]))
} l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
MatsdEst[ ,i] = predict(l.mod)
for (k in 1:n){
MatNu[k,i] = abs((Mat_Nml[k,i]) - (Mat_Tum[k,i]))/MatsdEst[k,i]
}
}
RandNu = RNuGen(mean(MatNu),sd(MatNu))
v = as.vector(RandNu)
PVals_paired = Nu2P(MatNu,v)
}
Paired_Stat = function(matrix){
nml_idx = grep(nml_str,colnames(matrix))
Mat_Nml = matrix[ ,nml_idx]
Mat_Tum = matrix[ , -nml_idx]
n = dim(Mat_Nml)[1]
s = dim(Mat_Nml)[2]
temp.means = temp.sd = MatsdEst = MatNu = matrix(NA,n,s)
for (i in 1:s){
for (j in 1:n){
temp.means[j,i] = mean(c(Mat_Nml[j,i],Mat_Tum[j,i]))
temp.sd[j,i] = sd(c(Mat_Nml[j,i],Mat_Tum[j,i]))
} l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
MatsdEst[ ,i] = predict(l.mod)
for (k in 1:n){
MatNu[k,i] = abs((Mat_Nml[k,i]) - (Mat_Tum[k,i]))/MatsdEst[k,i]
}
}
RandNu = RNuGen(mean(MatNu),sd(MatNu))
v = as.vector(RandNu)
PVals_paired = Nu2P(MatNu,v)
}
Nu2P = function(matrix,vecn,s){
MatP = matrix(NA,n,s)
for (i in 1:n){
for (j in 1:s){
MatP[i,j] = length(vec[vec <= matrix[i,j]])/10000
}
}
return(MatP)
}
Nu2P = function(matrix,vecn,s){
MatP = matrix(NA,n,s)
for (i in 1:n){
for (j in 1:s){
MatP[i,j] = length(vec[vec <= matrix[i,j]])/10000
}
}
return(MatP)
}
RNuGen = function(mean,sd){
Outer_Sim = rnorm(1000000,mean,sd)
PVal_dist = NuVal_mat = matrix(NA, 10000,100)
temp.means = temp.sd = matrix(NA, 10000,100)
SdEst = numeric(10000)
for (i in 1:100){
vec1 = sample(Outer_Sim,10000)
vec2 = sample(Outer_Sim,10000)
for (j in 1:10000){
temp.means[j,i] = mean(c(vec1[j],vec2[j]))
temp.sd[j,i] = sd(c(vec1[j],vec2[j]))
}
l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
SdEst[i] = predict(l.mod)
for (k in 1:10000){
NuVal_mat[k,i] = abs(vec1[k] - vec2[k])/SdEst[i]
}
}
return(NuVal_mat)
}
Paired_Stat = function(matrix){
nml_idx = grep(nml_str,colnames(matrix))
Mat_Nml = matrix[ ,nml_idx]
Mat_Tum = matrix[ , -nml_idx]
n = dim(Mat_Nml)[1]
s = dim(Mat_Nml)[2]
temp.means = temp.sd = MatsdEst = MatNu = matrix(NA,n,s)
for (i in 1:s){
for (j in 1:n){
temp.means[j,i] = mean(c(Mat_Nml[j,i],Mat_Tum[j,i]))
temp.sd[j,i] = sd(c(Mat_Nml[j,i],Mat_Tum[j,i]))
} l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
MatsdEst[ ,i] = predict(l.mod)
for (k in 1:n){
MatNu[k,i] = abs((Mat_Nml[k,i]) - (Mat_Tum[k,i]))/MatsdEst[k,i]
}
}
RandNu = RNuGen(mean(MatNu),sd(MatNu))
v = as.vector(RandNu)
PVals_paired = Nu2P(MatNu,v)
}
Paired_Stat = function(matrix){
nml_idx = grep(nml_str,colnames(matrix))
Mat_Nml = matrix[ ,nml_idx]
Mat_Tum = matrix[ , -nml_idx]
n = dim(Mat_Nml)[1]
s = dim(Mat_Nml)[2]
temp.means = temp.sd = MatsdEst = MatNu = matrix(NA,n,s)
for (i in 1:s){
for (j in 1:n){
temp.means[j,i] = mean(c(Mat_Nml[j,i],Mat_Tum[j,i]))
temp.sd[j,i] = sd(c(Mat_Nml[j,i],Mat_Tum[j,i]))
} l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
MatsdEst[ ,i] = predict(l.mod)
for (k in 1:n){
MatNu[k,i] = abs((Mat_Nml[k,i]) - (Mat_Tum[k,i]))/MatsdEst[k,i]
}
}
m = mean(MatNu)
sd = sd(MatNu)
RandNu = RNuGen(mean,sd)
v = as.vector(RandNu)
PVals_paired = Nu2P(MatNu,v)
}
RNuGen = function(mean,sd){
Outer_Sim = rnorm(1000000,mean,sd)
PVal_dist = NuVal_mat = matrix(NA, 10000,100)
temp.means = temp.sd = matrix(NA, 10000,100)
SdEst = numeric(10000)
for (i in 1:100){
vec1 = sample(Outer_Sim,10000)
vec2 = sample(Outer_Sim,10000)
for (j in 1:10000){
temp.means[j,i] = mean(c(vec1[j],vec2[j]))
temp.sd[j,i] = sd(c(vec1[j],vec2[j]))
}
l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
SdEst[i] = predict(l.mod)
for (k in 1:10000){
NuVal_mat[k,i] = abs(vec1[k] - vec2[k])/SdEst[i]
}
}
return(NuVal_mat)
}
Nu2P = function(matrix,vec,s){
MatP = matrix(NA,n,s)
for (i in 1:n){
for (j in 1:s){
MatP[i,j] = length(vec[vec <= matrix[i,j]])/10000
}
}
return(MatP)
}
Paired_Stat = function(matrix){
nml_idx = grep(nml_str,colnames(matrix))
Mat_Nml = matrix[ ,nml_idx]
Mat_Tum = matrix[ , -nml_idx]
n = dim(Mat_Nml)[1]
s = dim(Mat_Nml)[2]
temp.means = temp.sd = MatsdEst = MatNu = matrix(NA,n,s)
for (i in 1:s){
for (j in 1:n){
temp.means[j,i] = mean(c(Mat_Nml[j,i],Mat_Tum[j,i]))
temp.sd[j,i] = sd(c(Mat_Nml[j,i],Mat_Tum[j,i]))
} l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
MatsdEst[ ,i] = predict(l.mod)
for (k in 1:n){
MatNu[k,i] = abs((Mat_Nml[k,i]) - (Mat_Tum[k,i]))/MatsdEst[k,i]
}
}
m = mean(MatNu)
sd = sd(MatNu)
RandNu = RNuGen(mean,sd)
v = as.vector(RandNu)
PVals_paired = Nu2P(MatNu,v)
}
Paired_Stat = function(matrix){
nml_idx = grep(nml_str,colnames(matrix))
Mat_Nml = matrix[ ,nml_idx]
Mat_Tum = matrix[ , -nml_idx]
n = dim(Mat_Nml)[1]
s = dim(Mat_Nml)[2]
temp.means = temp.sd = MatsdEst = MatNu = matrix(NA,n,s)
for (i in 1:s){
for (j in 1:n){
temp.means[j,i] = mean(c(Mat_Nml[j,i],Mat_Tum[j,i]))
temp.sd[j,i] = sd(c(Mat_Nml[j,i],Mat_Tum[j,i]))
} l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
MatsdEst[ ,i] = predict(l.mod)
for (k in 1:n){
MatNu[k,i] = abs((Mat_Nml[k,i]) - (Mat_Tum[k,i]))/MatsdEst[k,i]
}
}
m = mean(MatNu)
sd = sd(MatNu)
RandNu = RNuGen(m,sd)
v = as.vector(RandNu)
PVals_paired = Nu2P(MatNu,v)
}
Paired_Stat = function(matrix){
nml_idx = grep(nml_str,colnames(matrix))
Mat_Nml = matrix[ ,nml_idx]
Mat_Tum = matrix[ , -nml_idx]
n = dim(Mat_Nml)[1]
s = dim(Mat_Nml)[2]
temp.means = temp.sd = MatsdEst = MatNu = matrix(NA,n,s)
for (i in 1:s){
for (j in 1:n){
temp.means[j,i] = mean(c(Mat_Nml[j,i],Mat_Tum[j,i]))
temp.sd[j,i] = sd(c(Mat_Nml[j,i],Mat_Tum[j,i]))
}
l.mod = loess(temp.sd[ ,i] ~ temp.means[ ,i])
MatsdEst[ ,i] = predict(l.mod)
for (k in 1:n){
MatNu[k,i] = abs((Mat_Nml[k,i]) - (Mat_Tum[k,i]))/MatsdEst[k,i]
}
}
m = mean(MatNu)
sd = sd(MatNu)
RandNu = RNuGen(m,sd)
v = as.vector(RandNu)
PVals_paired = Nu2P(MatNu,v)
}
PVals_paired
Paired_Stat(MatP)
